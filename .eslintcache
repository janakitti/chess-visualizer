[{"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\reportWebVitals.js":"1","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\App.js":"2","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\index.js":"3","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\Board.js":"4","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\Square.js":"5","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\Piece.js":"6","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\initBoard.js":"7"},{"size":362,"mtime":1606697259091,"results":"8","hashOfConfig":"9"},{"size":304,"mtime":1608344189265,"results":"10","hashOfConfig":"9"},{"size":500,"mtime":1608319368095,"results":"11","hashOfConfig":"9"},{"size":2530,"mtime":1608347950232,"results":"12","hashOfConfig":"9"},{"size":187,"mtime":1608320326435,"results":"13","hashOfConfig":"9"},{"size":171,"mtime":1608328057138,"results":"14","hashOfConfig":"9"},{"size":1045,"mtime":1608347970086,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xq1u8k",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\reportWebVitals.js",[],"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\App.js",[],"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\index.js",[],"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\Board.js",["31"],"import React from \"react\"\r\n\r\nimport Square from \"./Square\"\r\nimport Piece from \"./Piece\"\r\nimport initBoard from \"./initBoard\"\r\n\r\nclass Board extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            grid: initBoard()\r\n        }\r\n        this.refreshBoard = this.refreshBoard.bind(this)\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return <Square key={i} piece={this.state.grid[i].val} />\r\n    }\r\n\r\n    analyze(pos, piece, grid) {\r\n        if (piece.type === \"n\") {\r\n            // let vals = [\r\n            //     [pos-17, 1],\r\n            //     [pos-10, 1],\r\n            //     [pos+6, 1],\r\n            //     [pos+15, 1],\r\n            //     [pos-15, 1],\r\n            //     [pos-6, 1],\r\n            //     [pos+10, 1],\r\n            //     [pos+17, 1]\r\n            // ].filter(v => v[0] >= 0 && v[0] <= 63);\r\n\r\n            let vals = [\r\n                {x:-1, y:2, v:1},\r\n                {x:1, y:2, v:1},\r\n                {x:-1, y:-2, v:1},\r\n                {x:1, y:-2, v:1},\r\n                {x:-2, y:1, v:1},\r\n                {x:2, y:1, v:1},\r\n                {x:-2, y:-1, v:1},\r\n                {x:2, y:-1, v:1}\r\n            ].filter(val => \r\n                ((pos % 8) + val.x >= 0 && (pos % 8) + val.x <= 7) &&\r\n                (Math.floor(pos / 8) + val.y >= 0 && Math.floor(pos / 8) + val.y <= 7)\r\n            )\r\n\r\n\r\n            vals.forEach(v => {\r\n                grid[pos + v.x + 8*v.y].val = grid[pos + v.x + 8*v.y].val + v.v\r\n            })\r\n            return grid\r\n        } else {\r\n            return grid\r\n        }\r\n    }\r\n\r\n    refreshBoard() {\r\n        this.setState(prevState => {\r\n            let newGrid = prevState.grid;\r\n            for(let i = 0; i < 8; i++) {\r\n                for(let j = 0; j < 8; j++) {\r\n                    newGrid = this.analyze(8*i + j, prevState.grid[8*i + j], newGrid);\r\n                }\r\n            }\r\n            return {newGrid}\r\n        })\r\n        \r\n    }\r\n\r\n    render() {\r\n        console.log(\"render\");\r\n        const displayBoard = [];\r\n        for(let i = 0; i < 8; i++) {\r\n            const displayRow = [];\r\n            for(let j = 0; j < 8; j++) {\r\n                displayRow.push(this.renderSquare(8*i + j))\r\n            }\r\n            displayBoard.push(<div key={i} className=\"board-row\">{displayRow}</div>)\r\n        }\r\n        return (\r\n            <div>\r\n                {displayBoard}\r\n                <button onClick={this.refreshBoard}>Refresh</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\Square.js",[],"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\Piece.js",[],"C:\\Users\\JRatana\\Documents\\GitHub\\chess_visualizer\\chess_app\\src\\initBoard.js",[],{"ruleId":"32","severity":1,"message":"33","line":4,"column":8,"nodeType":"34","messageId":"35","endLine":4,"endColumn":13},"no-unused-vars","'Piece' is defined but never used.","Identifier","unusedVar"]